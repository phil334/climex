% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extremes.R
\name{return.level.climex.fit.gpd}
\alias{return.level.climex.fit.gpd}
\title{Calculation of the return levels.}
\usage{
\method{return.level}{climex.fit.gpd}(x, return.period = 100,
  error.estimation = c("none", "MC", "MLE", "bootstrap"), model = c("gev",
  "gpd"), monte.carlo.sample.size = 100, bootstrap.sample.size = 100,
  threshold = NULL, total.length = NULL, thresholded.time.series = NULL,
  extreme.type = c("max", "min"), silent = FALSE, mc.cores = NULL, ...)
}
\arguments{
\item{x}{Of class \emph{climex.fit.gpd}.}

\item{return.period}{Numeric vector of the return periods in
years. Default = 100.}

\item{error.estimation}{Method for calculating the standard errors
  of the fitted results. The errors of the GPD parameters will be
  calculated as the square roots of the diagonal elements of the
  inverse of the hessian matrix. The latter will be evaluated at
  the maximum likelihood estimates (MLE) of the GPD parameters.

  For all three methods of estimating the fitting errors of the
  return levels underlying series of threshold exceedances or
  block maxima is required. In case the user supplies numerical
  values to specify GPD parameters and not the output of the
  \code{\link{fit.gpd}} function no error estimation for the
  return level can be performed.

  \emph{MLE}: The standard error of the return level is calculated
    using the Delta method and the maximum likelihood estimates of
    the GPD parameters. Note: For positive shape parameters bigger
    than 0.3 this approach tends to highly overestimates the
    errors of the return levels.

  \emph{MC}: Alternative one can use a Monte Carlo method for
    which \strong{monte.carlo.sample.size} samples of the same
    size as \strong{x} will be drawn from a GPD distribution
    constituted by the obtained MLE of the GPD parameters of
    \strong{x}. The standard error is then calculated via the
    square of the variance of all fitted GPD parameters and
    calculated return levels. Note: In its essence this approach
    is not an estimation of the error involved in fitting the time
    series to a GPD distribution. It is rather the mean error of
    fitting a GPD-distribution with the same length and parameters
    as estimated ones.

  \emph{bootstrap}: Using this option the provided time series
    \strong{x} will be sampled with replacement
    \strong{bootstrap.sample.size} times and with the same length
    as the original time series. The standard errors of the
    GPD parameters and return levels of all those sampled
    series is calculated and returned as an estimate of the
    fitting error. 
    Note: Since the data is (hopefully) GPD-distributed, such
    a sampling has to be treated with a lot of care.

    Sometimes the inversion of the hessian fails (since the are
    some NaN in the hessian) when calculating the error estimates
    using the maximum likelihood approach (MLE) (which is also the
    reason why the \pkg{ismev} package occasionally does not
    work). In such cases the Monte Carlo (MC) method is used as a
    fallback.

  \emph{none} skips the calculation of the error. Default = "MLE".}

\item{model}{String determining whether to calculate the initial
parameters of the GEV ("gev") or GPD ("gpd") function. Default =
"gev". Note that this input argument will have no effect when
calling the function with an object of class
\emph{climex.fit.gpd}.}

\item{monte.carlo.sample.size}{Number of samples used to obtain
the Monte Carlo estimate of the standard error of the fitting.
Default = 100.}

\item{bootstrap.sample.size}{Number of samples with replacements
to drawn from the original series \strong{x} in order to
determine the standard errors for the GPD parameters and return
levels. Default = 100.}

\item{threshold}{Optional threshold for the GPD model. If present
it will be added to the return level to produce a value which
fits to underlying time series. Default = NULL.}

\item{total.length}{Total number of observations in the time
series the exceedance were obtained from (before! applying the
threshold). This argument is needed to calculate the standard
error of the return level via the delta method of the MLE in the
GPD model. Default = NULL.}

\item{thresholded.time.series}{Time series used with
\code{\link{fit.gpd}} on which already a threshold (the one
supplied here as well) was applied. Necessary to transform the
return level for numerical input and the GPD model from m-th
observation return level to annual return level. If omitted the
return level will be per observation. Default = NULL.}

\item{extreme.type}{String indicating whether to calculate the
quantiles at the right ("max") or left ("min") side of the PDF
of the series. Default = "max".}

\item{silent}{Throws an warning whenever the "gpd" model is used
and the \strong{thresholded.time.series} is not supplied. Since
this can be annoying one can also disable it. Default = FALSE.}

\item{mc.cores}{A numerical input specifying the number of cores
to use for the multi core application of the function (see
\code{\link[parallel]{detectCores}}). This functionality is only
available if the input is a list of different objects. If NULL,
the function will be calculated classically with only one core.
Default = NULL.}
}
\value{
A list containing the estimates "return.level" and their
  standard errors "error" if the input was a fitting object or a
  numerical input.
}
\description{
Calculate arbitrary return levels and their error
  estimates for generalized Pareto (GP) distributions.
}
\details{
Uses the \code{\link{rlevd}} function at its core (a port
  from the \pkg{extRemes} package) but also can handle the outputs
  of the \code{\link{fit.gpd}} functions, is capable of
  calculating numerous return levels at once, and also calculates
  the errors of the return levels. For the errors the ML fit is
  using the option \code{hessian=TRUE} (if not done already) or
  uses a Monte Carlo based approach. If no fitting object is
  provided, no errors will be calculated.
}
\examples{
fit.results <- fit.gpd( threshold( temp.potsdam, threshold = 29,
  decluster = TRUE ) )
return.level( fit.results, return.period = c( 10, 50, 100 ),
              error.estimation = "MLE" )
}
\seealso{
Other extremes: \code{\link{block.list}},
  \code{\link{block.xts}}, \code{\link{block}},
  \code{\link{decluster.list}},
  \code{\link{decluster.xts}}, \code{\link{decluster}},
  \code{\link{extremal.index}}, \code{\link{gev.density}},
  \code{\link{gpd.density}}, \code{\link{qevd}},
  \code{\link{return.level.climex.fit.gev}},
  \code{\link{return.level.list}},
  \code{\link{return.level.numeric}},
  \code{\link{return.level}}, \code{\link{revd}},
  \code{\link{rlevd}}, \code{\link{threshold.list}},
  \code{\link{threshold.xts}}, \code{\link{threshold}}
}
